1670101160357:cljs/quit
1670101175935::cljs/quit
1670361061652:("hello")
1670361071818:(println "hello")
1670361076690:"hello"
1670877025414::cljs/quit
1671221911207::repl/help
1671224783484::quit
1671224789742::cljs/quit
1671225469038:(map-indexed vector "foobar")
1671225482501:(map-indexed vector [[1 2] [3 4]])
1671225494361:(+ 1 2)
1671225497557:(map-indexed vector [[1 2] [3 4]])
1671225602996:(map-indexed [[1 2] [3 4]])
1671225613768:(map-indexed vector [[1 2] [3 4]])
1671225646918:(map (fn v (map-indexed vector v)) [[1 2] [3 4]])
1671225697705:(defn v (map-indexed vector v))
1671225713242:(defn v '(map-indexed vector v))
1671225748361:(map (fn [v] (map-indexed vector v)) [[1 2] [3 4]])
1671225853444:(defn- add-index [v] (map vector (range (count v)) v))
1671225861508:(add-index [1 2 3])
1671225887750:(map add-index [[1 2] [3 4]])
1671225974488:(map-indexed vector [[1 2] [3 4]])
1671226014727:(defn add-index [v] (map vector (range (count v)) v))
1671226186892:(map-indexed (fn [idx itm] [idx itm]) [1 2])
1671226227843:(defn add-index [v] (map-indexed (fn [idx itm] [idx itm]) v))
1671226236037:(add-index [1 2])
1671226281910:(map-indexed (fn [idx itm] (add-index itm) [[1 2] [3 4]])\n             )
1671226294239:(map-indexed (fn [idx itm] (add-index itm)) [[1 2] [3 4]])
1671226333337:(map-indexed (fn [idx itm] [idx (add-index itm)]) [[1 2] [3 4]])
1671226387240:(vec (add-index [1 2]))
1671226476428:(defn add-index [one-dim-array]\n  (vec (map-indexed (fn [idx itm] [idx itm]) one-dim-array)))
1671226481377:(add-index [1 2])
1671226528062:(map (fn [x] (push 3 x)) (add-index [1 2]))
1671226599086:(defn add-index [one-dim-array]\n  (vec (map-indexed (fn [idx itm] [itm idx]) one-dim-array)))
1671226601895:(add-index [1 2])
1671226639004:(map (fn [x] (conj x 3)) (add-index [1 2]))
1671226745859:(defn add-index [one-dim-array]\n  (vec (map-indexed (fn [idx itm] [itm idx]) one-dim-array)))\n\n(defn add-indices [two-dim-array]\n  (map-indexed\n   (fn [idx itm] (conj (add-index itm) idx))\n   two-dim-array))
1671226765911:(add-indices [[1 2] [3 4]])
1671226850929:(defn add-x [one-dim-array]\n  (vec (map-indexed (fn [idx itm] {:val itm :x idx}) one-dim-array)))
1671226855471:(add-x [1 2])
1671226890113:(conj {:a 3} {:b 5})
1671227047788:(defn add-constant-y [one-dim-array-with-x constant-y]\n  (map (fn [x] (conj x {:y constant-y}))))
1671227061119:(add-constant-y (add-x [1 2]) 5)
1671227090409:(defn add-constant-y [one-dim-array-with-x constant-y]\n  (map (fn [x] (conj x {:y constant-y})) one-dim-array-with-x))
1671227093516:(add-constant-y (add-x [1 2]) 5)
1671227176273:(defn add-x [one-dim-array]\n  (vec (map-indexed (fn [idx itm] {:val itm :x idx}) one-dim-array)))\n\n(defn add-constant-y [one-dim-array-with-x constant-y]\n  (map (fn [x] (conj x {:y constant-y})) one-dim-array-with-x))\n\n(defn add-y [two-dim-array]\n  (map-indexed\n   (fn [y one-dim-array]\n     (add-constant-y (add-x one-dim-array y)))\n   two-dim-array))
1671227198731:(defn add-x [one-dim-array]\n  (vec (map-indexed (fn [idx itm] {:val itm :x idx}) one-dim-array)))\n\n(defn add-constant-y [one-dim-array-with-x constant-y]\n  (map (fn [x] (conj x {:y constant-y})) one-dim-array-with-x))\n\n(defn add-y [two-dim-array]\n  (map-indexed\n   (fn [y one-dim-array]\n     (add-constant-y (add-x one-dim-array) y))\n   two-dim-array))
1671227207955:(add-y [[1 2] [3 4]])
1671227251502:(defn add-x [one-dim-array]\n  (vec (map-indexed (fn [idx itm] {:val itm :x idx}) one-dim-array)))\n\n(defn add-constant-y [one-dim-array-with-x constant-y]\n  (vec\n   (map (fn [x] (conj x {:y constant-y})) one-dim-array-with-x)\n   )\n  )\n\n(defn add-y [two-dim-array]\n  (vec\n   (map-indexed\n    (fn [y one-dim-array]\n      (add-constant-y (add-x one-dim-array) y))\n    two-dim-array))\n  )
1671227263520:(add-y [[1 2] [3 4]])
1671227395755:(add-x [1 2])
1671310017191:(alength [[1 2] [3 4]])
1671310091604:(count [[1 2] [3 4]])
1671310507316:(+ 1 2 3)
1671310603586:(defn add-x [one-dim-array]\n  (vec (map-indexed (fn [idx itm] {:val itm :x idx}) one-dim-array)))\n\n(defn add-constant-y [one-dim-array-with-x constant-y]\n  (vec\n   (map (fn [x] (conj x {:y constant-y})) one-dim-array-with-x)\n   )\n  )\n\n(defn add-y [two-dim-array]\n  (vec\n   (map-indexed\n    (fn [y one-dim-array]\n      (add-constant-y (add-x one-dim-array) y))\n    two-dim-array))\n  )
1671310616513:(add-y [[1 2] [3 4]])
1671310669823:(ai/add-xy [[1 2] [3 4]])
1671310683260:(defn add-xy [two-dim-array]\n  (vec\n   (map-indexed\n    (fn [y one-dim-array]\n      (add-constant-y (add-x one-dim-array) y))\n    two-dim-array)))
1671310690925:(defn two-dim-index2coord [canvas-box two-dim-array]\n  (let [[xmin ymin xmax ymax] canvas-box\n        delta-x (- xmax xmin)\n        delta-y (- ymax ymin)\n        nx (count (first two-dim-array))\n        ny (count two-dim-array)\n        h-x (/ delta-x nx)\n        h-y (/ delta-y ny)\n        hh-x (/ h-x 2)\n        hh-y (/ h-y 2)]\n    (map\n     (fn [one-dim-array]\n       (map\n        (fn [item]\n          {\n           :val (:val item)\n           :x (+ xmin hh-x (* h-x (:x item)))\n           :y (+ xmin hh-x (* h-x (:y item)))\n           })))\n     two-dim-array)))
1671310725651:(two-dim-index2coord [100 0 700 600] (add-xy [[1 2] [3 4]]))
1671310752099:(def arr1 (add-xy [[1 2] [3 4]]))
1671310754460:arr1
1671310767606:(two-dim-index2coord [100 0 700 600] arr1)
1671310806903:(def arr-x (add-x [1 2]))
1671310809130:arr-x
1671310924578:(defn calc-coords [item]\n          {\n           :val (:val item)\n           :x (+ xmin hh-x (* h-x (:x item)))\n           :y (+ xmin hh-x (* h-x (:y item)))\n           })
1671310928231:(defn two-dim-index2coord [canvas-box two-dim-array]\n  (let [[xmin ymin xmax ymax] canvas-box\n        delta-x (- xmax xmin)\n        delta-y (- ymax ymin)\n        nx (count (first two-dim-array))\n        ny (count two-dim-array)\n        h-x (/ delta-x nx)\n        h-y (/ delta-y ny)\n        hh-x (/ h-x 2)\n        hh-y (/ h-y 2)]\n    (map\n     (fn [one-dim-array]\n       (map\n        (fn [item]\n          {\n           :val (:val item)\n           :x (+ xmin hh-x (* h-x (:x item)))\n           :y (+ xmin hh-x (* h-x (:y item)))\n           })\n        one-dim-array))\n     two-dim-array)))
1671310931287:(two-dim-index2coord [100 0 700 600] arr1)
1671310973170:(two-dim-index2coord [0 0 10 20] arr1)
1671311025966:(defn two-dim-index2coord [canvas-box two-dim-array]\n  (let [[xmin ymin xmax ymax] canvas-box\n        delta-x (- xmax xmin)\n        delta-y (- ymax ymin)\n        nx (count (first two-dim-array))\n        ny (count two-dim-array)\n        h-x (/ delta-x nx)\n        h-y (/ delta-y ny)\n        hh-x (/ h-x 2)\n        hh-y (/ h-y 2)]\n    (map\n     (fn [one-dim-array]\n       (map\n        (fn [item]\n          {\n           :val (:val item)\n           :x (+ xmin hh-x (* h-x (:x item)))\n           :y (+ ymin hh-y (* h-y (:y item)))\n           })\n        one-dim-array))\n     two-dim-array)))
1671311029638:(two-dim-index2coord [0 0 10 20] arr1)
1671311335531:1e-5
1671311533102:-1e-3
1671311654817:(filter (fn [x] (> x 3)) [1 2 3 4 5])
1671311809545:(two-dim-index2coord [0 0 10 20] arr1)
1671311813240:arr1
1671311969212:(two-dim-index2coord [0 0 10 20] arr1)
1671312374478:(defn two-dim-index2coord [canvas-box two-dim-array]\n  (let [[xmin ymin xmax ymax] canvas-box\n        delta-x (- xmax xmin)\n        delta-y (- ymax ymin)\n        nx (count (first two-dim-array))\n        ny (count two-dim-array)\n        h-x (/ delta-x nx)\n        h-y (/ delta-y ny)\n        hh-x (/ h-x 2)\n        hh-y (/ h-y 2)]\n    (map\n     (fn [one-dim-array]\n       (map\n        (fn [item]\n          {\n           :val (:val item)\n           :x (+ xmin hh-x (* h-x (:x item)))\n           :y (+ ymin hh-y (* h-y (:y item)))\n           })\n        one-dim-array))\n     two-dim-array)))
1671312379446:(two-dim-index2coord [0 0 10 20] arr1)
1671312487686:(defn two-dim-index2coord [canvas-box two-dim-array]\n  (let [[xmin ymin xmax ymax] canvas-box\n        delta-x (- xmax xmin)\n        delta-y (- ymax ymin)\n        nx (count (first two-dim-array))\n        ny (count two-dim-array)\n        h-x (/ delta-x nx)\n        h-y (/ delta-y ny)\n        hh-x (/ h-x 2)\n        hh-y (/ h-y 2)]\n    (mapv\n     (fn [one-dim-array]\n       (mapv\n        (fn [item]\n          {\n           :val (:val item)\n           :x (+ xmin hh-x (* h-x (:x item)))\n           :y (+ ymin hh-y (* h-y (:y item)))\n           })\n        one-dim-array))\n     two-dim-array)))
1671312495505:(two-dim-index2coord [0 0 10 20] arr1)
1671312622147:(defonce red-blue-7\n  [{:color "#b2182b" :upper-bd -1e-3}\n   {:color "#ef8a62" :upper-bd -1e-6}\n   {:color "#fddbc7" :upper-bd -1e-9}\n   {:color "#f7f7f7" :upper-bd 1e-3}\n   {:color "#d1e5f0" :upper-bd 1e-2}\n   {:color "#67a9cf" :upper-bd 1e-1}\n   {:color "#2166ac" :upper-bd 1e0}])
1671312629529:(defn select-color [colormap value]\n  (peek (filter (fn [color] (< x (:upper-bd color))))))
1671312878758:inf
1671312900634:##Inf
1671312908425:(< ##Inf 5)
1671312919925:(< ##-Inf 5)
1671312984443:(defonce red-blue-7\n  [{:color "#b2182b" :lower-bd ##-Inf}\n   {:color "#ef8a62" :lower-bd -1e-3}\n   {:color "#fddbc7" :lower-bd -1e-6}\n   {:color "#f7f7f7" :lower-bd -1e-9}\n   {:color "#d1e5f0" :lower-bd 1e-3}\n   {:color "#67a9cf" :lower-bd 1e-2}\n   {:color "#2166ac" :lower-bd 1e-1}])
1671312994497:(defn select-color [colormap x]\n  (peek (filter (fn [color] (< x (:lower-bd color))) colormap)))
1671313004049:(select-color red-blue-7 0)
1671313027887:(def red-blue-7\n  [{:color "#b2182b" :lower-bd ##-Inf}\n   {:color "#ef8a62" :lower-bd -1e-3}\n   {:color "#fddbc7" :lower-bd -1e-6}\n   {:color "#f7f7f7" :lower-bd -1e-9}\n   {:color "#d1e5f0" :lower-bd 1e-3}\n   {:color "#67a9cf" :lower-bd 1e-2}\n   {:color "#2166ac" :lower-bd 1e-1}])
1671313033912:(select-color red-blue-7 0)
1671313079235:(defn select-color [colormap x]\n  (peek (filterv (fn [color] (< x (:lower-bd color))) colormap)))
1671313082744:(select-color red-blue-7 0)
1671313111463:(defn select-color [colormap x]\n  (peek (filterv (fn [color] (> x (:lower-bd color))) colormap)))
1671313114080:(select-color red-blue-7 0)
1671313121369:(select-color red-blue-7 -10)
1671313128291:(select-color red-blue-7 10)
1671313504680:{:color "#2166ac", :lower-bd 0.1}
1671313509405:(>= 1 1)
1671313535641:(defonce red-blue-8\n  [{:color "#b2182b" :lower-bd ##-Inf}\n   {:color "#ef8a62" :lower-bd -1e-3}\n   {:color "#fddbc7" :lower-bd -1e-6}\n   {:color "#f7f7f7" :lower-bd -1e-9}\n   {:color "#fddbc7" :lower-bd 1e-3}\n   {:color "#f4a582" :lower-bd 1e-2}\n   {:color "#d6604d" :lower-bd 1e-1}\n   {:color "#b2182b" :lower-bd 1e-0}])
1671313552639:(select-color red-blue-8\n              10)
1671313996506:(conj {:a 3 :b 5} {:c 6})
1671314140809:(conj "text" 5)
1671314170570:(conj "text" str(5) ";")
1671314205192:(conj "text" (str 5) ";")
1671314219123:(concat\n "text" (str 5) ";")
1671314250497:(str "text" 5 ";")
1671314468167:(defn add-color [two-dim-with-coords colormap]\n  (mapv\n   (fn [one-dim-with-coords]\n     (mapv\n      (fn [item]\n        (conj\n         (item)\n         {:style\n          (str "fill: "\n               (:color (select-color colormap (:val item)))\n               ";")}))))\n   two-dim-with-coords))
1671314508884:(add-color (two-dim-index2coord [0 0 10 20] arr1) red-blue-8)
1671314515467:(two-dim-index2coord [0 0 10 20] arr1)
1671314589735:(defn add-color [two-dim-with-coords colormap]\n  (mapv\n   (fn [one-dim-with-coords]\n     (mapv\n      (fn [item]\n        (conj\n         (item)\n         {:style\n          (str "fill: "\n               (:color (select-color colormap (:val item)))\n               ";")})))\n     one-dim-with-coords)\n   two-dim-with-coords))
1671314596098:(add-color (two-dim-index2coord [0 0 10 20] arr1) red-blue-8)
1671314636964:(defn add-color [two-dim-with-coords colormap]\n  (mapv\n   (fn [one-dim-with-coords]\n     (mapv\n      (fn [item]\n        (conj\n         (item)\n         {:style\n          (str "fill: "\n               (:color (select-color colormap (:val item)))\n               ";")}))\n      one-dim-with-coords))\n   two-dim-with-coords))
1671314641104:(add-color (two-dim-index2coord [0 0 10 20] arr1) red-blue-8)
1671314709895:(select-color red-blue-8 {;val 2})\n                          \n                          \n\n                          ))
1671314731368:(select-color red-blue-8 {:val 2})
1671314760758:(select-color red-blue-8 {:val 2 :color "abc"})
1671314779969:(select-color red-blue-8 2)
1671314794557:(two-dim-index2coord [0 0 10 20] arr1)
1671314888807:(defn add-color [two-dim-with-coords colormap]\n  (mapv\n   (fn [one-dim-with-coords]\n     (mapv\n      (fn [item]\n        (do\n          (println item)\n(conj\n         (item)\n         {:style\n          (str "fill: "\n               (:color (select-color colormap (:val item)))\n               ";")})\n          )\n        )\n      one-dim-with-coords))\n   two-dim-with-coords))
1671314893545:(add-color (two-dim-index2coord [0 0 10 20] arr1) red-blue-8)
1671315469981:(defn add-color-to-item [item colormap]\n  (conj\n         (item)\n         {:style\n          (str "fill: "\n               (:color (select-color colormap (:val item)))\n               ";")}))
1671315494207:(add-color-to-item {:val 2} red-blue-8)
1671315513504:(defn add-color-to-item [item colormap]\n  (conj\n         item\n         {:style\n          (str "fill: "\n               (:color (select-color colormap (:val item)))\n               ";")}))
1671315517569:(add-color-to-item {:val 2} red-blue-8)
1671315623169:(defn add-color [v-2d colormap]\n  (utils/mapv-2d\n   (fn [item] (add-color-to-item item colormap))\n   v-2d))
1671315638689:(defn mapv-2d [func arr-2d]\n  (mapv\n   (fn [arr-1d] (mapv func arr-1d))\n   arr-2d))
1671315649943:(defn add-color [v-2d colormap]\n  (mapv-2d\n   (fn [item] (add-color-to-item item colormap))\n   v-2d))
1671315680091:(add-color (two-dim-index2coord [0 0 10 20] arr1))
1671315700580:(add-color (two-dim-index2coord [0 0 10 20] arr1) red-blue-8)
1671315731072:(add-color (two-dim-index2coord [0 0 10 20] [[1]]) red-blue-8)
1671315758708:(add-color (two-dim-index2coord [0 0 10 20] [[1][2]]) red-blue-8)
1671315775576:(add-color (two-dim-index2coord [0 0 10 20] [[1 1][2 2]]) red-blue-8)
1671399887018:(mapv (1 2 3))
1671399894644:(vec (1 2 3))
1671399900289:(vector (1 2 3))
1671399965834:(vector 1 2 3)
1671399972005:(apply vector (1 2 3))
1671399979734:(apply vector '(1 2 3))
1671399987443:(vector '(1 2 3))
1671400062446:(map (fn [x] [x]) [1 2 3])
1671400498699:(map (fn [[x]] x) [[[1] [2]]])
1671400508674:(mapv (fn [[x]] x) [[[1] [2]]])
1671400659647:(list [1 2 3])
1671400672981:(apply list '[1 2 3])
1671400876038:(mapv (fn [[x]] x) [[[1] [2]] [[3] [4]]])
1671400980702:(mapv (fn [[x] & remaining] x) [[[1] [2]] [[3] [4]]])
1671401000613:(mapv (fn [[x] & remaining] (conj x remaining)) [[[1] [2]] [[3] [4]]])
1671401019099:(mapv (fn [x & remaining] (conj x remaining)) [[[1] [2]] [[3] [4]]])
1671401171278:(conj [[[1] [2]] [[3] [4]]])
1671401185543:(conj [[1] [2]] [[3] [4]])
1671401366249:(def x [\n [[:rect {:x 3.5, :y 2.5, :style "fill: #d6604d;"}] [:rect {:x 8.5, :y 2.5, :style "fill: #d6604d;"}]]\n [[:rect {:x 3.5, :y 7.5, :style "fill: #b2182b;"}] [:rect {:x 8.5, :y 7.5, :style "fill: #b2182b;"}]]\n ])
1671401367301:x
1671401418393:(defn flatten-one [[x]] (conj x))
1671401426235:(flatten-one x)
1671401473621:(def x [[1 2] [3 4]])
1671401477323:(flatten-one x)
1671401494359:(defn flatten-one [x] (apply conj x))
1671401496307:(flatten-one x)
1671401688150:(reduce (fn [x y] (apply conj x y)) x)
1671402202496:(defn flatten-one-layer [nested]\n  (reduce (fn [x y] (apply conj x y)) nested))
1671402206861:x
1671402213746:(flatten-one-layer x)
1671402255186:(def y [[[1] [2]] [[3] [4]]])
1671402258991:(flatten-one-layer y)
1671402477222:(def x [[[:rect {:x 3.5, :y 2.5, :style "fill: #d6604d;"}] [:rect {:x 8.5, :y 2.5, :style "fill: #d6604d;"}]] [[:rect {:x 3.5, :y 7.5, :style "fill: #b2182b;"}] [:rect {:x 8.5, :y 7.5, :style "fill: #b2182b;"}]]])
1671402482570:(flatten-one-layer x)
1671402558631:(apply list (flatten-one-layer x))
